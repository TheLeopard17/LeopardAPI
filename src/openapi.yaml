openapi: 3.0.0
info:
  title: Leopard API
  version: 1.0.0
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                success:
                  value:
                    message: User registered
        '400':
          description: Username and password required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                missingFields:
                  value:
                    message: Username and password required
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                conflict:
                  value:
                    message: User already exists
  /auth/login:
    post:
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Username and password required or cannot find user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                missingFields:
                  value:
                    message: Username and password required
                userNotFound:
                  value:
                    message: Cannot find user
        '403':
          description: User or password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                invalidCredentials:
                  value:
                    message: User or password incorrect
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Service is up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
components:
  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
    Status:
      type: object
      properties:
        status:
          type: string
  responses:
    Unauthorized:
      description: Authorization token required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            missingToken:
              value:
                message: Authorization token required
    Forbidden:
      description: Invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
          examples:
            invalidToken:
              value:
                message: Invalid token
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT